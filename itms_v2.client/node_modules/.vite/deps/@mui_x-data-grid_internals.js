import {
  DATA_GRID_DEFAULT_SLOTS_COMPONENTS,
  GLOBAL_API_REF,
  GRID_DEFAULT_STRATEGY,
  GRID_ID_AUTOGENERATED,
  GridBaseColumnHeaders,
  GridColumnHeadersInner,
  GridVirtualScroller,
  GridVirtualScrollerContent,
  GridVirtualScrollerRenderZone,
  buildRootGroup,
  buildWarning,
  calculatePinnedRowsHeight,
  clamp,
  columnGroupsStateInitializer,
  columnMenuStateInitializer,
  columnsStateInitializer,
  computeSlots,
  convertFilterV7ToLegacy,
  convertLegacyOperators,
  convertQuickFilterV7ToLegacy,
  createSelector,
  createSelectorMemoized,
  defaultGetRowsToExport,
  densityStateInitializer,
  editingStateInitializer,
  exportAs,
  filterStateInitializer,
  findParentElementFromClassName,
  focusStateInitializer,
  getActiveElement,
  getColumnsToExport,
  getGridFilter,
  getPublicApiRef,
  getRenderableIndexes,
  getRowIdFromRowModel,
  getTotalHeaderHeight,
  getTreeNodeDescendants,
  getVisibleRows,
  gridAdditionalRowGroupsSelector,
  gridColumnFieldsSelector,
  gridColumnLookupSelector,
  gridColumnVisibilityModelSelector,
  gridColumnsStateSelector,
  gridEditRowsStateSelector,
  gridPinnedRowsSelector,
  gridVirtualizationColumnEnabledSelector,
  gridVirtualizationEnabledSelector,
  gridVirtualizationSelector,
  isDeepEqual,
  isEventTargetInPortal,
  isFunction,
  isInternalFilter,
  isNavigationKey,
  isNumber,
  isObject,
  isSingleSelectColDef,
  paginationStateInitializer,
  passFilterLogic,
  preferencePanelStateInitializer,
  rowSelectionStateInitializer,
  rowsMetaStateInitializer,
  rowsStateInitializer,
  serializeCellValue,
  sortingStateInitializer,
  tagInternalFilter,
  uncapitalizeObjectKeys,
  unstable_gridHeaderFilteringEditFieldSelector,
  unstable_gridHeaderFilteringMenuSelector,
  unstable_resetCreateSelectorCache,
  unwrapPrivateAPI,
  useGridApiMethod,
  useGridClipboard,
  useGridColumnGrouping,
  useGridColumnHeaders,
  useGridColumnMenu,
  useGridColumnSpanning,
  useGridColumns,
  useGridCsvExport,
  useGridDensity,
  useGridDimensions,
  useGridEditing,
  useGridEvents,
  useGridFilter,
  useGridFocus,
  useGridInitialization,
  useGridInitializeState,
  useGridKeyboardNavigation,
  useGridLogger,
  useGridPagination,
  useGridParamsApi,
  useGridPreferencesPanel,
  useGridPrintExport,
  useGridPrivateApiContext,
  useGridRegisterPipeProcessor,
  useGridRegisterStrategyProcessor,
  useGridRowSelection,
  useGridRowSelectionPreProcessors,
  useGridRows,
  useGridRowsMeta,
  useGridRowsPreProcessors,
  useGridScroll,
  useGridSorting,
  useGridStatePersistence,
  useGridVirtualScroller,
  useGridVirtualization,
  useGridVisibleRows,
  useOnMount,
  useProps,
  useTimeout,
  virtualizationStateInitializer
} from "./chunk-45HTVUOJ.js";
import "./chunk-NZLLFFPT.js";
import "./chunk-WIBS6BQE.js";
import "./chunk-UMKBO4LJ.js";
import "./chunk-LHYNNQPN.js";
import "./chunk-T7G6SMHN.js";
import "./chunk-Y6IZ5XML.js";
import "./chunk-HKSWFIZJ.js";
import "./chunk-PONHGRTM.js";
import "./chunk-6LZ3NNPS.js";
import "./chunk-5ARCC44C.js";
import "./chunk-FIEGKE2I.js";
import "./chunk-VLSNMPTQ.js";
import "./chunk-FE4NMH2B.js";
import "./chunk-UTHUSKJL.js";
import "./chunk-XC4ZQFKL.js";
import "./chunk-4NLSWXOB.js";
import "./chunk-6S3S2GDH.js";
import "./chunk-QVAWQ7SV.js";
import "./chunk-J26ER5JI.js";
import "./chunk-ZW7WJ6XU.js";
import "./chunk-UWKKRNGI.js";
import "./chunk-UTJYKXRO.js";
import "./chunk-3J2JWW3H.js";
import "./chunk-ILJ2KVTL.js";
import "./chunk-KD5XVT3I.js";
import "./chunk-6NRPDABP.js";
import "./chunk-AHKJO35U.js";
import "./chunk-KSVL534U.js";
import {
  _extends,
  init_extends
} from "./chunk-ZW3DX352.js";
import "./chunk-DT77FM6J.js";
import {
  require_react
} from "./chunk-4D5CYJYK.js";
import {
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/@mui/x-data-grid/hooks/features/headerFiltering/useGridHeaderFiltering.js
init_extends();
var React = __toESM(require_react());
var headerFilteringStateInitializer = (state) => _extends({}, state, {
  headerFiltering: {
    editing: null,
    menuOpen: null
  }
});
var useGridHeaderFiltering = (apiRef, props) => {
  const logger = useGridLogger(apiRef, "useGridHeaderFiltering");
  const setHeaderFilterState = React.useCallback((headerFilterState) => {
    apiRef.current.setState((state) => {
      var _headerFilterState$ed, _headerFilterState$me;
      if (props.signature === "DataGrid") {
        return state;
      }
      return _extends({}, state, {
        headerFiltering: {
          editing: (_headerFilterState$ed = headerFilterState.editing) != null ? _headerFilterState$ed : null,
          menuOpen: (_headerFilterState$me = headerFilterState.menuOpen) != null ? _headerFilterState$me : null
        }
      });
    });
    apiRef.current.forceUpdate();
  }, [apiRef, props.signature]);
  const startHeaderFilterEditMode = React.useCallback((field) => {
    logger.debug(`Starting edit mode on header filter for field: ${field}`);
    apiRef.current.setHeaderFilterState({
      editing: field
    });
  }, [apiRef, logger]);
  const stopHeaderFilterEditMode = React.useCallback(() => {
    logger.debug(`Stopping edit mode on header filter`);
    apiRef.current.setHeaderFilterState({
      editing: null
    });
  }, [apiRef, logger]);
  const showHeaderFilterMenu = React.useCallback((field) => {
    logger.debug(`Opening header filter menu for field: ${field}`);
    apiRef.current.setHeaderFilterState({
      menuOpen: field
    });
  }, [apiRef, logger]);
  const hideHeaderFilterMenu = React.useCallback(() => {
    logger.debug(`Hiding header filter menu for active field`);
    let fieldToFocus = apiRef.current.state.headerFiltering.menuOpen;
    if (fieldToFocus) {
      const columnLookup = gridColumnLookupSelector(apiRef);
      const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);
      const orderedFields = gridColumnFieldsSelector(apiRef);
      if (!columnLookup[fieldToFocus]) {
        fieldToFocus = orderedFields[0];
      }
      if (columnVisibilityModel[fieldToFocus] === false) {
        const visibleOrderedFields = orderedFields.filter((field) => {
          if (field === fieldToFocus) {
            return true;
          }
          return columnVisibilityModel[field] !== false;
        });
        const fieldIndex = visibleOrderedFields.indexOf(fieldToFocus);
        fieldToFocus = visibleOrderedFields[fieldIndex + 1] || visibleOrderedFields[fieldIndex - 1];
      }
      apiRef.current.setHeaderFilterState({
        menuOpen: null
      });
      apiRef.current.setColumnHeaderFilterFocus(fieldToFocus);
    }
  }, [apiRef, logger]);
  const headerFilterPrivateApi = {
    setHeaderFilterState
  };
  const headerFilterApi = {
    startHeaderFilterEditMode,
    stopHeaderFilterEditMode,
    showHeaderFilterMenu,
    hideHeaderFilterMenu
  };
  useGridApiMethod(apiRef, headerFilterApi, "public");
  useGridApiMethod(apiRef, headerFilterPrivateApi, "private");
};

// node_modules/@mui/x-data-grid/utils/createControllablePromise.js
function createControllablePromise() {
  let resolve;
  let reject;
  const promise = new Promise((_resolve, _reject) => {
    resolve = _resolve;
    reject = _reject;
  });
  promise.resolve = resolve;
  promise.reject = reject;
  return promise;
}
export {
  DATA_GRID_DEFAULT_SLOTS_COMPONENTS,
  GLOBAL_API_REF,
  GRID_DEFAULT_STRATEGY,
  GRID_ID_AUTOGENERATED,
  GridBaseColumnHeaders,
  GridColumnHeadersInner,
  GridVirtualScroller,
  GridVirtualScrollerContent,
  GridVirtualScrollerRenderZone,
  buildRootGroup,
  buildWarning,
  calculatePinnedRowsHeight,
  clamp,
  columnGroupsStateInitializer,
  columnMenuStateInitializer,
  columnsStateInitializer,
  computeSlots,
  convertFilterV7ToLegacy,
  convertLegacyOperators,
  convertQuickFilterV7ToLegacy,
  createControllablePromise,
  createSelector,
  createSelectorMemoized,
  defaultGetRowsToExport,
  densityStateInitializer,
  editingStateInitializer,
  exportAs,
  filterStateInitializer,
  findParentElementFromClassName,
  focusStateInitializer,
  getActiveElement,
  getColumnsToExport,
  getGridFilter,
  getPublicApiRef,
  getRenderableIndexes,
  getRowIdFromRowModel,
  getTotalHeaderHeight,
  getTreeNodeDescendants,
  getVisibleRows,
  gridAdditionalRowGroupsSelector,
  gridColumnsStateSelector,
  gridEditRowsStateSelector,
  gridPinnedRowsSelector,
  gridVirtualizationColumnEnabledSelector,
  gridVirtualizationEnabledSelector,
  gridVirtualizationSelector,
  headerFilteringStateInitializer,
  isDeepEqual,
  isEventTargetInPortal,
  isFunction,
  isInternalFilter,
  isNavigationKey,
  isNumber,
  isObject,
  isSingleSelectColDef,
  paginationStateInitializer,
  passFilterLogic,
  preferencePanelStateInitializer,
  rowSelectionStateInitializer,
  rowsMetaStateInitializer,
  rowsStateInitializer,
  serializeCellValue,
  sortingStateInitializer,
  tagInternalFilter,
  uncapitalizeObjectKeys,
  unstable_gridHeaderFilteringEditFieldSelector,
  unstable_gridHeaderFilteringMenuSelector,
  unstable_resetCreateSelectorCache,
  unwrapPrivateAPI,
  useGridClipboard,
  useGridColumnGrouping,
  useGridColumnHeaders,
  useGridColumnMenu,
  useGridColumnSpanning,
  useGridColumns,
  useGridCsvExport,
  useGridDensity,
  useGridDimensions,
  useGridEditing,
  useGridEvents,
  useGridFilter,
  useGridFocus,
  useGridHeaderFiltering,
  useGridInitialization,
  useGridInitializeState,
  useGridKeyboardNavigation,
  useGridPagination,
  useGridParamsApi,
  useGridPreferencesPanel,
  useGridPrintExport,
  useGridPrivateApiContext,
  useGridRegisterPipeProcessor,
  useGridRegisterStrategyProcessor,
  useGridRowSelection,
  useGridRowSelectionPreProcessors,
  useGridRows,
  useGridRowsMeta,
  useGridRowsPreProcessors,
  useGridScroll,
  useGridSorting,
  useGridStatePersistence,
  useGridVirtualScroller,
  useGridVirtualization,
  useGridVisibleRows,
  useOnMount,
  useProps,
  useTimeout,
  virtualizationStateInitializer
};
//# sourceMappingURL=@mui_x-data-grid_internals.js.map
